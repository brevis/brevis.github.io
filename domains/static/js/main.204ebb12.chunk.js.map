{"version":3,"sources":["helper/combinations.js","App.js","reportWebVitals.js","index.js"],"names":["generate","pattern","alphabetA","alphabetB","lastCombination","c","at","getLastPatternCombination","combinations","currentCombination","getNextCombination","push","getCombinationsCount","count","length","combination","getFirstPatternCombination","reverseString","nextCombination","nextCharacter","gettingNext","i","patternC","currentCharacter","getNextCharachter","character","alphabet","position","indexOf","str","split","reverse","join","App","useState","totalCombinations","setTotalCombination","rowData","setRowData","setAlphabetA","setAlphabetB","setPattern","generationInProgress","setGenerationInProgress","useEffect","className","Row","Col","Form","Group","Label","Control","type","value","onChange","event","target","disabled","Button","onClick","setTimeout","domains","map","domainName","domain","status","style","height","width","field","sortable","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.204ebb12.chunk.js","sourcesContent":["/**\n * @param string pattern \n * @param string alphabetA \n * @param string alphabetB \n * @returns array\n */\nexport function generate(pattern, alphabetA, alphabetB) {\n    const lastCombination = getLastPatternCombination(pattern, alphabetA, alphabetB);\n    const combinations = [];\n    let currentCombination = null;\n    while (currentCombination !== lastCombination) {\n        currentCombination = getNextCombination(currentCombination, pattern, alphabetA, alphabetB);\n        if (currentCombination === null) break;\n        combinations.push(currentCombination);\n    }\n    return combinations;\n}\n\n/**\n * @param string pattern \n * @param string alphabetA \n * @param string alphabetB \n * @returns int\n */\n export function getCombinationsCount(pattern, alphabetA, alphabetB) {\n    let count = 1;\n    for (let c of pattern) {\n        if (c === 'A') {\n            count *= alphabetA.length;\n        } else if (c === 'B') {\n            count *= alphabetB.length;\n        }\n    }\n    return count;\n}\n\n/**\n * @param string pattern \n * @param string alphabetA \n * @param string alphabetB \n * @returns string\n */\n export function getLastPatternCombination(pattern, alphabetA, alphabetB) {\n    let lastCombination = '';\n    for (let c of pattern) {\n        if (c === 'A') {\n            lastCombination += alphabetA.at(-1);\n        } else if (c === 'B') {\n            lastCombination += alphabetB.at(-1);\n        } else {\n            lastCombination += c;\n        }\n    }\n    return lastCombination;\n}\n\n/**\n * @param string pattern \n * @param string alphabetA \n * @param string alphabetB \n * @returns string\n */\n export function getFirstPatternCombination(pattern, alphabetA, alphabetB) {\n    let lastCombination = '';\n    for (let c of pattern) {\n        if (c === 'A') {\n            lastCombination += alphabetA.at(0);\n        } else if (c === 'B') {\n            lastCombination += alphabetB.at(0);\n        } else {\n            lastCombination += c;\n        }\n    }\n    return lastCombination;\n}\n\n/**\n * @param string combination\n * @param string pattern \n * @param string alphabetA \n * @param string alphabetB \n * @returns string|null\n */\nexport function getNextCombination(combination, pattern, alphabetA, alphabetB) {\n    if (combination === null) {\n        return getFirstPatternCombination(pattern, alphabetA, alphabetB);    \n    }\n    combination = reverseString(combination);\n    pattern = reverseString(pattern);\n    let nextCombination = '';\n    let nextCharacter = null;\n    let gettingNext = true;\n    for (let i = 0; i < pattern.length; i++) {\n        let patternC = pattern[i];\n        let currentCharacter = combination[i];\n        if (gettingNext) {\n            if (patternC === 'A') {\n                nextCharacter = getNextCharachter(currentCharacter, alphabetA);\n                if (nextCharacter === null) {\n                    currentCharacter = alphabetA.at(0);\n                } else {\n                    gettingNext = false;\n                    currentCharacter = nextCharacter;\n                }\n            } else if (patternC === 'B') {\n                nextCharacter = getNextCharachter(currentCharacter, alphabetB);\n                if (nextCharacter === null) {\n                    currentCharacter = alphabetB.at(0);\n                } else {\n                    gettingNext = false;\n                    currentCharacter = nextCharacter;\n                }\n            }\n        }\n        nextCombination += currentCharacter;        \n    }\n    if (gettingNext) return null;\n    return reverseString(nextCombination);\n}\n\n/**\n * @param string character\n * @param string alphabet \n * @returns string|null\n */\n export function getNextCharachter(character, alphabet) {\n    const position = alphabet.indexOf(character);\n    if (position === -1 || position > alphabet.length - 2) return null;\n    return alphabet.at(position + 1);\n}\n\n/**\n * @param string character\n * @returns string\n */\nfunction reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}","import { useState, useEffect } from 'react';\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { generate, getCombinationsCount } from './helper/combinations';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './App.css';\n\nfunction App() {\n  const [totalCombinations, setTotalCombination] = useState(0)\n  const [rowData, setRowData] = useState([])\n  const [alphabetA, setAlphabetA] = useState('aeiouy')\n  const [alphabetB, setAlphabetB] = useState('bcdfghjklmnpqrstvwxz')\n  const [pattern, setPattern] = useState('ABABAB.com')\n  const [generationInProgress, setGenerationInProgress] = useState(false)\n\n  function updateAlphabetA(event) {\n    setAlphabetA(event.target.value);\n    setTotalCombination(getCombinationsCount(pattern, alphabetA, alphabetB));\n  }\n\n  function updateAlphabetB(event) {\n    setAlphabetB(event.target.value);\n    setTotalCombination(getCombinationsCount(pattern, alphabetA, alphabetB));\n  }\n\n  function updatePattern(event) {\n    setPattern(event.target.value);\n    setTotalCombination(getCombinationsCount(pattern, alphabetA, alphabetB));\n  }\n\n  function generateDomains() {\n    setGenerationInProgress(true);\n    setTimeout(() => {\n      const domains = generate(pattern, alphabetA, alphabetB);\n      setRowData(domains.map(domainName => {return {domain: domainName, status: '...'}}));\n      setGenerationInProgress(false);\n    }, 100);    \n  }\n\n  function checkAvailability() {\n    // TODO: implement me\n  }\n\n  useEffect(() => {\n    setTotalCombination(getCombinationsCount(pattern || '', alphabetA || '', alphabetB || ''));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Row className=\"mt-4\">\n        <Col>\n          <Form.Group>\n            <Form.Label>Alphabet A</Form.Label>\n            <Form.Control type=\"text\" value={alphabetA} onChange={updateAlphabetA} disabled={generationInProgress} />\n          </Form.Group>\n          <Form.Group className=\"mb-2\">\n            <Form.Label>Alphabet B</Form.Label>\n            <Form.Control type=\"text\" value={alphabetB} onChange={updateAlphabetB} disabled={generationInProgress} />\n          </Form.Group>\n          <Form.Group className=\"mb-2\">\n            <Form.Label>Pattern</Form.Label>\n            <Form.Control type=\"text\" value={pattern} onChange={updatePattern} disabled={generationInProgress} />\n          </Form.Group>          \n        </Col>\n        <Col>\n          <div className=\"mt-2\">\n            <Button onClick={generateDomains} disabled={generationInProgress}>Generate {totalCombinations} domains</Button>\n          </div>\n          <div className=\"mt-2\">\n            <Button onClick={checkAvailability} disabled={generationInProgress}>Check Availability</Button>\n          </div>\n        </Col>\n      </Row>\n      <div className=\"ag-theme-alpine mt-4\" style={{height: 400, width: \"100%\"}}>\n           <AgGridReact\n               rowData={rowData}>\n               <AgGridColumn field=\"domain\" sortable={true} filter={true}></AgGridColumn>\n               <AgGridColumn field=\"status\" sortable={true} filter={true}></AgGridColumn>\n           </AgGridReact>\n       </div>       \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}